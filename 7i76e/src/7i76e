#!/usr/bin/env python3

"""
To Do:

"""
VERSION = '0.1.1'

import sys, os
from functools import partial

from PyQt5 import uic
from PyQt5.QtWidgets import (QApplication, QMainWindow, QMessageBox,
	QDialog)
from PyQt5.QtGui import QPixmap

from lib7i76e import buildcombos
from lib7i76e import buildmenus
from lib7i76e import sscards
from lib7i76e import checkconfig
from lib7i76e import loadini
from lib7i76e import buildfiles
from lib7i76e import buildini
from lib7i76e import buildhal
from lib7i76e import buildio
from lib7i76e import buildmisc
from lib7i76e import buildss
from lib7i76e import utilities
from lib7i76e import card
from lib7i76e import pcinfo
from lib7i76e import extcmd
from lib7i76e import helptext
from lib7i76e.help import Ui_Dialog as helpDialog
from lib7i76e.about import Ui_about as aboutDialog

class VersionError(QMainWindow):
	def __init__(self):
		super(VersionError, self).__init__()
		print('wrong python version')
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle('Version Error')
		msgBox.setText('Python 3.6 or newer is required.\nYour Python is {}'.format(sys.version[0:3]))
		msgBox.setStandardButtons(QMessageBox.Ok)
		msgBox.exec()
		sys.exit()

class MainWindow(QMainWindow):
	def __init__(self):
		super(MainWindow, self).__init__()
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/lib7i76e'
			uic.loadUi(os.path.join(self.lib_path, '7i76e.ui'), self)
		if os.path.split(sys.argv[0])[0] == '.':
			srcPath = os.path.split(os.path.realpath(sys.argv[0]))[0]
			self.lib_path = os.path.join(srcPath, 'lib7i76e')
			uic.loadUi(os.path.join(srcPath, '7i76e.ui'), self)
		self.version = VERSION
		self.emcVersion = '1.1'
		self.setWindowTitle(f'7i76e Configuration Tool Version {self.version}')
		self.card = {'type':'7i76e', 'joints': 5, 'inputs': 32, 'outputs': 16}
		buildmenus.build(self)
		buildcombos.build(self)
		utilities.checks(self)
		self.extcmd = extcmd.extcmd()
		self.ladderOptionsList = utilities.plcOptions()
		self.setupConnections()
		self.show()

	def setupConnections(self):
		self.configName.textChanged[str].connect(partial(utilities.configNameChanged, self))
		self.maxLinearVel.textChanged[str].connect(partial(utilities.maxVelChanged, self))
		self.spindleTypeCB.currentIndexChanged.connect(partial(utilities.spindleTypeChanged, self))
		self.ssCardCB.currentIndexChanged.connect(partial(sscards.build, self))
		self.actionNew.triggered.connect(partial(utilities.fileNew, self))
		self.actionOpen.triggered.connect(partial(loadini.openini, self))
		self.actionOpen7i76e.triggered.connect(partial(loadini.openini, self, '7i76e'))
		self.actionSavePins.triggered.connect(partial(card.savePins, self))
		self.actionSaveSignals.triggered.connect(partial(card.saveSignals, self))
		self.actionSaveParameters.triggered.connect(partial(card.saveParameters, self))
		self.actionSave.triggered.connect(self.buildfiles)
		self.actionSaveAs.triggered.connect(partial(utilities.fileSaveAs, self))
		self.actionCheck.triggered.connect(partial(checkconfig.checkit, self))
		self.actionBuild.triggered.connect(self.buildfiles)
		for i in range(self.card['joints']):
			getattr(self, f'axisCB_{i}').currentIndexChanged.connect(partial(utilities.axisChanged, self))
		for i in range(self.card['joints']):
			getattr(self, f'scale_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
		for i in range(self.card['joints']):
			getattr(self, f'maxVelocity_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
		for i in range(self.card['joints']):
			getattr(self, f'maxAccel_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
		for i in range(self.card['joints']):
			getattr(self, f'pidDefault_{i}').clicked.connect(partial(utilities.pidSetDefault, self))
		self.pidDefault_s.clicked.connect(partial(utilities.spindlePidDefault, self))
		for i in range(self.card['joints']):
			getattr(self, 'driveCB_' + str(i)).currentIndexChanged.connect(partial(utilities.driveChanged, self))
		self.pidDefault_s.clicked.connect(partial(utilities.spindlePidDefault, self))
		self.actionTabHelp.triggered.connect(partial(self.help, 0))
		self.actionBuildHelp.triggered.connect(partial(self.help, 20))
		self.actionPCHelp.triggered.connect(partial(self.help, 30))
		self.copyPB.clicked.connect(partial(utilities.copyOutput, self))
		self.cpuPB.clicked.connect(partial(pcinfo.cpuInfo, self))
		self.nicPB.clicked.connect(partial(pcinfo.nicInfo, self))
		self.calcNicPB.clicked.connect(partial(pcinfo.nicCalc, self))
		self.readTmaxPB.clicked.connect(partial(pcinfo.readTmax, self))
		self.readPB.clicked.connect(partial(card.readCard, self, '7i76e'))
		self.flashPB.clicked.connect(partial(card.flashCard, self, '7i76e'))
		self.reloadPB.clicked.connect(partial(card.reloadCard, self, '7i76e'))
		self.verifyPB.clicked.connect(partial(card.verifyCard, self, '7i76e'))
		self.pinsPB.clicked.connect(partial(card.getPins, self))
		pixmap = QPixmap(os.path.join(self.lib_path, '7i76e.png'))
		self.card7i76eLB.setPixmap(pixmap)

	def buildfiles(self):
		if not checkconfig.checkit(self):
			self.machinePTE.appendPlainText('Build Failed')
			return
		buildfiles.build(self)
		buildini.build(self)
		buildhal.build(self)
		buildio.build(self)
		buildmisc.build(self)
		buildss.build(self)

	def errorMsg(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def help(self, tab):
		if tab == 0:
			tab = self.tabWidget.currentIndex()
		dialog = QDialog()
		dialog.ui = helpDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.label.setText(helptext.descriptions(tab))
		dialog.exec_()

def main():
	app = QApplication(sys.argv)
	if float(sys.version[0:3]) < 3.6:
		ex = VersionError()
	else:
		ex = MainWindow()
	sys.exit(app.exec_())

if __name__ == "__main__":
	main()
